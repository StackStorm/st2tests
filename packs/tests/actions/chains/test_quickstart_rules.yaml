---
vars:
    tested_rule: examples.sample_rule_with_webhook
    tested_rule_unicode: "examples.unicode_rule_with_webhook_你好"

chain:
    -
        # Check if tested rule is already registered
        name: setup_sample_rule_with_webhook_exists
        ref: core.local
        params:
            env:
              ST2_BASE_URL: "{{protocol}}://{{hostname}}"
              ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
              ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
              ST2_AUTH_TOKEN: "{{token}}"
            cmd: "st2 rule get {{ tested_rule }}"
        on-success: setup_delete_rule
        on-failure: test_create_rule
    -
        name: setup_delete_rule
        description: Remove tested rule so we can test its creation
        ref: core.local
        params:
            env:
              ST2_BASE_URL: "{{protocol}}://{{hostname}}"
              ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
              ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
              ST2_AUTH_TOKEN: "{{token}}"
            cmd: "st2 rule delete {{ tested_rule }} "
        on-success: test_create_rule_unicode_name
    -
        name: test_create_rule_unicode_name
        ref: core.local
        params:
            env:
              ST2_BASE_URL: "{{protocol}}://{{hostname}}"
              ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
              ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
              ST2_AUTH_TOKEN: "{{token}}"
            cmd: "st2 rule create /usr/share/doc/st2/examples/rules/sample_rule_with_webhook_unicode_name.yaml -j | grep name"
        on-success: test_get_rule_unicode_name
    -
        name: test_get_rule_unicode_name
        ref: core.local
        params:
            env:
              ST2_BASE_URL: "{{protocol}}://{{hostname}}"
              ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
              ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
              ST2_AUTH_TOKEN: "{{token}}"
            cmd: "st2 rule get {{ tested_rule_unicode }} -j | grep name"
        on-success: test_create_rule
    -
        name: test_create_rule
        ref: core.local
        params:
            env:
              ST2_BASE_URL: "{{protocol}}://{{hostname}}"
              ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
              ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
              ST2_AUTH_TOKEN: "{{token}}"
            cmd: "st2 rule create /usr/share/doc/st2/examples/rules/sample_rule_with_webhook.yaml -j | grep name"
        on-success: sleep
    -
        name: sleep
        ref: core.local
        params:
            env:
              ST2_BASE_URL: "{{protocol}}://{{hostname}}"
              ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
              ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
              ST2_AUTH_TOKEN: "{{token}}"
            cmd: "sleep 30"
            timeout: 180
        on-success: test_webhook_list
    -
        name: test_webhook_list
        ref: core.local
        params:
            env:
              ST2_BASE_URL: "{{protocol}}://{{hostname}}"
              ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
              ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
              ST2_AUTH_TOKEN: "{{token}}"
            cmd: "st2 webhook list -j | grep sample"
        on-success: test_rule_list
    -
        name: test_rule_list
        ref: core.local
        params:
            env:
              ST2_BASE_URL: "{{protocol}}://{{hostname}}"
              ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
              ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
              ST2_AUTH_TOKEN: "{{token}}"
            cmd: "st2 rule list | grep webhook"
        on-success: test_rule_get
    -
        name: test_rule_get
        ref: core.local
        params:
            env:
              ST2_BASE_URL: "{{protocol}}://{{hostname}}"
              ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
              ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
              ST2_AUTH_TOKEN: "{{token}}"
            cmd: "st2 rule get {{ tested_rule }} -j | grep name"
        on-success: setup_post_to_web_hook_via_curl
    -
        name: setup_post_to_web_hook_via_curl
        ref: core.local
        params:
            env:
              ST2_BASE_URL: "{{protocol}}://{{hostname}}"
              ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
              ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
              ST2_AUTH_TOKEN: "{{token}}"
            cmd: "curl -k {{protocol}}://{{hostname}}:9101/v1/webhooks/sample -d '{\"foo\": \"bar\", \"name\": \"st2\"}' -H 'Content-Type: application/json' -H 'X-Auth-Token: {{token}}'"
        on-success: test_check_output_after_post_via_curl
    -
        name: test_check_output_after_post_via_curl
        ref: core.local
        params:
            env:
              ST2_BASE_URL: "{{protocol}}://{{hostname}}"
              ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
              ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
              ST2_AUTH_TOKEN: "{{token}}"
            cmd: "sleep 2 ; sync ; sleep 4; tail -1 ~/st2.webhook_sample.out | grep 'foo' | grep 'bar' | grep 'name' | grep 'st2'"
        on-success: setup_post_to_web_hook_via_st2
    -
        name: setup_post_to_web_hook_via_st2
        ref: core.local
        params:
            env:
              ST2_BASE_URL: "{{protocol}}://{{hostname}}"
              ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
              ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
              ST2_AUTH_TOKEN: "{{token}}"
            cmd: "st2 run core.http method=POST body='{\"you\": \"too\", \"name\": \"st2\"}' url={{protocol}}://{{hostname}}:9101/v1/webhooks/sample headers='x-auth-token={{token}},content-type=application/json' verify_ssl_cert=False"
        on-success: test_check_output_after_post_via_st2
        on-failure: test_check_output_after_post_via_st2
    -
        name: test_check_output_after_post_via_st2
        ref: core.local
        params:
            env:
              ST2_BASE_URL: "{{protocol}}://{{hostname}}"
              ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
              ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
              ST2_AUTH_TOKEN: "{{token}}"
            cmd: "sleep 2 ; sync ; sleep 4; tail -1 ~/st2.webhook_sample.out | grep 'you' | grep 'too' | grep 'name' | grep 'st2'"
        on-success: test_delete_rule
        on-failure: test_delete_rule
    -
        name: test_delete_rule
        description: Remove tested rule so we can test its creation
        ref: core.local
        params:
            env:
              ST2_BASE_URL: "{{protocol}}://{{hostname}}"
              ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
              ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
              ST2_AUTH_TOKEN: "{{token}}"
            cmd: "st2 rule delete {{ tested_rule }} | grep 'Resource with id \"{{ tested_rule }}\" has been successfully deleted.' ; sleep 2"
    #     on-success: test_rule_deleted
    # -
    #     name: test_rule_deleted
    #     ref: core.local
    #     params:
    #         env:
    #           ST2_BASE_URL: "{{protocol}}://{{hostname}}"
    #           ST2_AUTH_URL: "{{protocol}}://{{hostname}}:9100"
    #           ST2_API_URL: "{{protocol}}://{{hostname}}:9101"
    #           ST2_AUTH_TOKEN: "{{token}}"
    #         cmd: "if st2 rule get {{ tested_rule }}; then exit 2; else exit 0; fi"
